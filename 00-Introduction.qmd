---
title: "Introduction"
format: 
  revealjs:
    theme: moon
---

```{r}
library(tidyverse)
library(here)
library(gt)
```

## Hello!

:::: {.columns}

::: {.column width="60%"}

![](https://www.kelly-bodwin.com/img/headshot_glasses_scarf_rounded.png){width=50%}

::: {style="font-size: 70%;"}

I'm **Kelly Bodwin**, and I'm an Associate Professor of Statistics and Data Science at California Polytechnic State University.
:::

:::

::: {.column width="40%"}
Find me...

**Website:** www.kelly-bodwin.com

**Github:** kbodwin

**Threads:** \@kellbod

**Mastodon:** kellybodwin\@mastodon.social

**Email:** kbodwin@calpoly.edu
:::

::::


## About this workshop

:::: {.columns}

::: {.column width="50%"}

This:

![](https://cdn1.iconfinder.com/data/icons/map-navigation-15/64/Journey-512.png)
:::

::: {.column width="50%"}

Not this:

![](https://i.ytimg.com/vi/rioxtv6YJ3g/maxresdefault.jpg)

:::

::::

::: {style="font-size: 70%;"}

I want to help you **get started** in the right direction, reach **important checkpoints**, and know where to find **more information.**

You should leave knowing how to **approach learning more** `tidymodels`, not how to do everything!

:::

# Setup

## Setup

1. Install the `usethis` package, if you have not:

```{r, eval = FALSE}
install.packages("usethis")
```

2. Run the following to acquire all workshop materials:

```{r, eval = FALSE}
usethis::use_course("kbodwin/tidymodels_workshop")
```

3. Open the `installs.R` script and run all, if you have not.

**OR**

Work on the cloud, with everything set up for you:

[posit cloud link]

# The Machine Learning and Tidymodels Workflow

## 0. **Clean** the data

> "What *problems* in the data do I need to *permanently fix*?"

- I do not consider this part of the ML workflow

- This step needs to happen to every dataset you ever use for any reason.

- Data *cleaning* (as opposed to *processing*) is not analysis specific; it is fixing issues in data record.

## 1. **Explore** the data

> "What *patterns* do I see that might inform my modeling decisions?"

- Look at every variable's relationship to the **target** variable.

- Look at *realtionships* between variables.

- This is not part of `tidymodels` specifically, so we won't spend time on it today

- But it's **VERY IMPORTANT!**

## 2. **Specify** the models.

> "What strategies for future prediction am I willing to try?"

- There are many different approaches to the idea of "Let's learn from observed data how to predict for future observations"

- Based on statistical principles, algorithmic convenience, common sense, ...

- Use built-in `tidymodels` functions, like `linear_reg()`, to set up model specifications.

## 3. **Prepare** the data

> "What is my response variable?"

> "What are my predictors?"

- Deciding what form of data needs to be handed to the "prediction strategy" to calculate a prediction.

- Use `recipe()` to establish explanatory and response variables.

- Use `step_*()` to transform variables.

## 4. **Fit** the models.

> "When new data comes along, what do we calculate?"

- For *ordinary linear regression*, this means *estimating the coefficient values*.

- For a *decision tree*, this means *determining the split questions*.

- Use `workflow()` to combine *recipes* and *specifications*

- Use `fit` to calculate exact procedure from training data.

- (Actual math relies on pre-existing packages and functions, aka "engines")

## 5. **Evaluate** the models.

> "How well did each prediction strategy succeed?"

- **test** data is new data that was not seen during the *fit* step

- We hope that the predicted values are "close" to the real values in any test set

- Choose metrics from the `yardstick` package to measure model success on new data.

## 6. Put the final model **into production**.

> "This is the process I will actually use in the future."

- You will choose **one** best approach to future prediction...

- ... and then re-`fit` it on all the data you have...

- ... and then use it!

# Why `tidymodels`?

## Coherence with `scikit-learn`

- Python's `scikit-learn` was at least part of the inspiration for `tidymodels`

- Key similarity: Isolate each step of the workflow, then combine.

:::callout-warning

Although they are structurally similar, the exact syntax and inputs for models can be very different!

:::

## Structure and Philosophy

- *Opinionated:*  Inputs that don't make sense trigger errors

- Less chance for "silly" mistakes or incorrect use

- Consistent structure allows for "shortcuts" for repeat tasks, like cross-validation

## Today's dataset

Heart disease risk in adults:


```{r, echo = FALSE}
ha_1 <- read_csv(here("Data", "ha_1.csv"))
head(ha_1) %>%
  gt()
```

::: {style="font-size: 50%;"}

*(Names are falsified.)*

Source: https://archive.ics.uci.edu/dataset/45/heart+disease

:::


